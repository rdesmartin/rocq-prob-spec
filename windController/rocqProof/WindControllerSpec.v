(* Generated by Vehicle *)

Require Import mathcomp.algebra.ssralg.
Require Import mathcomp.ssreflect.ssrbool.
Require Import mathcomp.ssreflect.fintype.
Require Import mathcomp.ssreflect.ssrnat.
Require Import mathcomp.ssreflect.seq.
Require Import mathcomp.ssreflect.tuple.
Require Import mathcomp.algebra.zmodp.
Require Import mathcomp.reals.reals.
Require Import mathcomp.ssreflect.order.
Require Import vehicle.tensor.
Open Scope ring_scope.
Open Scope order_scope.

Parameter R : realType.

Definition InputVector : Type := tensor R (2%N :: nil).

Definition currentSensor : 'I_2 := 0.
Definition previousSensor : 'I_2 := 1.

Definition OutputVector : Type := tensor R (1%N :: nil).

Definition velocity : 'I_1 := 0.

Parameter controller : InputVector -> OutputVector.

Definition normalise (x : InputVector) : InputVector := foreach (fun i => (tnth x i + (4 : R)) / 8).


Definition safeInput (x : InputVector) : Prop :=
    forall i, -(325 / 100 : R) <= tnth x i <= (325 / 100 : R).

Definition safeOutput (x : InputVector) : Prop :=
    let y := tnth (controller (normalise x)) velocity in
    -(125 / 100 : R) < y + 2 * tnth x currentSensor - tnth x previousSensor < (125 / 100 : R).

Axiom safe : forall x, safeInput x -> safeOutput x.